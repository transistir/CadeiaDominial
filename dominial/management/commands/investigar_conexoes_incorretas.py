from django.core.management.base import BaseCommand
from dominial.models import Documento, Lancamento
from django.db.models import Q
import re


class Command(BaseCommand):
    help = 'Investiga conex√µes incorretas na cadeia dominial'

    def add_arguments(self, parser):
        parser.add_argument(
            '--matriculas',
            nargs='+',
            type=str,
            help='Matr√≠culas espec√≠ficas para investigar'
        )
        parser.add_argument(
            '--corrigir',
            action='store_true',
            help='Corrigir automaticamente as conex√µes incorretas'
        )

    def handle(self, *args, **options):
        matriculas = options.get('matriculas', ['M9716', 'M9712', 'M19905'])
        corrigir = options.get('corrigir', False)
        
        self.stdout.write("üîç INVESTIGANDO CONEX√ïES INCORRETAS NA CADEIA DOMINIAL")
        self.stdout.write("=" * 70)
        
        # Analisar cada matr√≠cula
        for matricula in matriculas:
            self.analisar_matricula(matricula)
        
        # Buscar conex√µes problem√°ticas
        self.buscar_conexoes_problematicas()
        
        if corrigir:
            self.corrigir_conexoes_incorretas()

    def analisar_matricula(self, matricula):
        """Analisa uma matr√≠cula espec√≠fica"""
        self.stdout.write(f"\nüìÑ ANALISANDO MATR√çCULA: {matricula}")
        self.stdout.write("-" * 50)
        
        documentos = Documento.objects.filter(numero=matricula).select_related(
            'cartorio', 'imovel', 'tipo'
        ).prefetch_related('lancamentos')
        
        if not documentos.exists():
            self.stdout.write(f"‚ùå Nenhum documento encontrado: {matricula}")
            return
        
        for doc in documentos:
            self.stdout.write(f"   Documento ID: {doc.id}")
            self.stdout.write(f"   Tipo: {doc.tipo.get_tipo_display()}")
            self.stdout.write(f"   Im√≥vel: {doc.imovel.matricula}")
            self.stdout.write(f"   Cart√≥rio: {doc.cartorio.nome}")
            self.stdout.write(f"   Origem do documento: '{doc.origem}'")
            
            # Verificar lan√ßamentos
            lancamentos = doc.lancamentos.all()
            self.stdout.write(f"   Total de lan√ßamentos: {lancamentos.count()}")
            
            for i, lanc in enumerate(lancamentos, 1):
                self.stdout.write(f"     Lan√ßamento {i}:")
                self.stdout.write(f"       ID: {lanc.id}")
                self.stdout.write(f"       Tipo: {lanc.tipo.get_tipo_display()}")
                self.stdout.write(f"       N√∫mero: {lanc.numero_lancamento}")
                self.stdout.write(f"       Origem: '{lanc.origem}'")
                self.stdout.write(f"       Data: {lanc.data}")

    def buscar_conexoes_problematicas(self):
        """Busca conex√µes problem√°ticas entre as matr√≠culas"""
        self.stdout.write(f"\nüîç BUSCANDO CONEX√ïES PROBLEM√ÅTICAS")
        self.stdout.write("=" * 50)
        
        # Buscar lan√ßamentos que referenciam M9712
        lancamentos_m9712 = Lancamento.objects.filter(
            origem__icontains='M9712'
        ).select_related('documento', 'documento__imovel')
        
        self.stdout.write(f"Lan√ßamentos que referenciam M9712: {lancamentos_m9712.count()}")
        
        for lanc in lancamentos_m9712:
            self.stdout.write(f"   Lan√ßamento ID: {lanc.id}")
            self.stdout.write(f"   Documento: {lanc.documento.numero}")
            self.stdout.write(f"   Im√≥vel: {lanc.documento.imovel.matricula}")
            self.stdout.write(f"   Origem: '{lanc.origem}'")
            self.stdout.write(f"   Tipo: {lanc.tipo.get_tipo_display()}")
            self.stdout.write()
        
        # Buscar lan√ßamentos que referenciam M9716
        lancamentos_m9716 = Lancamento.objects.filter(
            origem__icontains='M9716'
        ).select_related('documento', 'documento__imovel')
        
        self.stdout.write(f"Lan√ßamentos que referenciam M9716: {lancamentos_m9716.count()}")
        
        for lanc in lancamentos_m9716:
            self.stdout.write(f"   Lan√ßamento ID: {lanc.id}")
            self.stdout.write(f"   Documento: {lanc.documento.numero}")
            self.stdout.write(f"   Im√≥vel: {lanc.documento.imovel.matricula}")
            self.stdout.write(f"   Origem: '{lanc.origem}'")
            self.stdout.write(f"   Tipo: {lanc.tipo.get_tipo_display()}")
            self.stdout.write()
        
        # Buscar lan√ßamentos que referenciam M19905
        lancamentos_m19905 = Lancamento.objects.filter(
            origem__icontains='M19905'
        ).select_related('documento', 'documento__imovel')
        
        self.stdout.write(f"Lan√ßamentos que referenciam M19905: {lancamentos_m19905.count()}")
        
        for lanc in lancamentos_m19905:
            self.stdout.write(f"   Lan√ßamento ID: {lanc.id}")
            self.stdout.write(f"   Documento: {lanc.documento.numero}")
            self.stdout.write(f"   Im√≥vel: {lanc.documento.imovel.matricula}")
            self.stdout.write(f"   Origem: '{lanc.origem}'")
            self.stdout.write(f"   Tipo: {lanc.tipo.get_tipo_display()}")
            self.stdout.write()

    def corrigir_conexoes_incorretas(self):
        """Corrige conex√µes incorretas identificadas"""
        self.stdout.write(f"\nüîß CORRIGINDO CONEX√ïES INCORRETAS")
        self.stdout.write("=" * 50)
        
        # Baseado na an√°lise, o problema √© que M9712 est√° sendo conectada incorretamente √† M19905
        # quando deveria apenas ser origem da M9716
        
        # Buscar lan√ßamentos que t√™m M9712 como origem mas n√£o deveriam
        lancamentos_problematicos = Lancamento.objects.filter(
            origem__icontains='M9712'
        ).exclude(
            documento__numero='M9716'  # Excluir a conex√£o correta M9712 -> M9716
        )
        
        self.stdout.write(f"Lan√ßamentos com conex√£o incorreta para M9712: {lancamentos_problematicos.count()}")
        
        for lanc in lancamentos_problematicos:
            self.stdout.write(f"   Corrigindo lan√ßamento ID: {lanc.id}")
            self.stdout.write(f"   Documento: {lanc.documento.numero}")
            self.stdout.write(f"   Origem atual: '{lanc.origem}'")
            
            # Remover M9712 da origem se n√£o for a conex√£o correta
            if lanc.origem:
                origens = [o.strip() for o in lanc.origem.split(';') if o.strip()]
                origens_corrigidas = [o for o in origens if o != 'M9712']
                
                if len(origens_corrigidas) != len(origens):
                    nova_origem = '; '.join(origens_corrigidas) if origens_corrigidas else ''
                    lanc.origem = nova_origem
                    lanc.save()
                    self.stdout.write(f"   Origem corrigida: '{nova_origem}'")
                    self.stdout.write(f"   ‚úÖ Corrigido!")
                else:
                    self.stdout.write(f"   ‚ö†Ô∏è N√£o foi necess√°rio corrigir")
            self.stdout.write()
