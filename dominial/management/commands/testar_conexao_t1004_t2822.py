"""
Comando para testar a conex√£o T1004 -> T2822
"""

from django.core.management.base import BaseCommand
from dominial.models import Documento, Lancamento, Imovel
from dominial.services.hierarquia_arvore_service_melhorado import HierarquiaArvoreServiceMelhorado
import logging

# Configurar logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


class Command(BaseCommand):
    help = 'Testa a conex√£o T1004 -> T2822 com o servi√ßo melhorado'

    def add_arguments(self, parser):
        parser.add_argument(
            '--imovel',
            type=str,
            help='Matr√≠cula do im√≥vel para testar (opcional)'
        )
        parser.add_argument(
            '--criar-automatico',
            action='store_true',
            help='Criar documentos automaticamente se n√£o existirem'
        )

    def handle(self, *args, **options):
        imovel_matricula = options.get('imovel')
        criar_automatico = options.get('criar_automatico', False)
        
        self.stdout.write("üîç TESTANDO CONEX√ÉO T1004 -> T2822")
        self.stdout.write("=" * 50)
        
        # Testar extra√ß√£o de origens
        self.stdout.write("\nüìã TESTANDO EXTRA√á√ÉO DE ORIGENS")
        self.stdout.write("-" * 30)
        
        textos_teste = [
            "T2822",
            "T 2822",
            "T-2822",
            "T.2822",
            "transcri√ß√£o 2822",
            "matr√≠cula 2822",
            "2822",
            "M9712; T2822",
            "T2822; M9716"
        ]
        
        for texto in textos_teste:
            origens = HierarquiaArvoreServiceMelhorado.extrair_origens_robusto(texto)
            self.stdout.write(f"   '{texto}' -> {origens}")
        
        # Buscar documento T1004
        self.stdout.write("\nüîç BUSCANDO DOCUMENTO T1004")
        self.stdout.write("-" * 30)
        
        doc_t1004 = Documento.objects.filter(numero='T1004').first()
        if doc_t1004:
            self.stdout.write(f"‚úÖ Documento T1004 encontrado:")
            self.stdout.write(f"   ID: {doc_t1004.id}")
            self.stdout.write(f"   Im√≥vel: {doc_t1004.imovel.matricula}")
            self.stdout.write(f"   Cart√≥rio: {doc_t1004.cartorio.nome}")
            
            # Buscar lan√ßamentos
            lancamentos = doc_t1004.lancamentos.all()
            self.stdout.write(f"   Lan√ßamentos ({lancamentos.count()}):")
            for lanc in lancamentos:
                self.stdout.write(f"     - {lanc.tipo.tipo}: {lanc.numero_lancamento}")
                self.stdout.write(f"       Origem: {lanc.origem}")
                self.stdout.write(f"       Cart√≥rio Origem: {lanc.cartorio_origem.nome if lanc.cartorio_origem else 'None'}")
                
                # Testar extra√ß√£o de origens
                origens = HierarquiaArvoreServiceMelhorado.extrair_origens_robusto(lanc.origem)
                self.stdout.write(f"       Origens extra√≠das: {origens}")
                
                # Testar busca de documentos
                for origem in origens:
                    doc_encontrado = HierarquiaArvoreServiceMelhorado.buscar_documento_origem_robusto(
                        origem, lanc.cartorio_origem, lanc
                    )
                    if doc_encontrado:
                        self.stdout.write(f"       ‚úÖ {origem} encontrado: {doc_encontrado.numero} (ID: {doc_encontrado.id}) no cart√≥rio {doc_encontrado.cartorio.nome}")
                    else:
                        self.stdout.write(f"       ‚ùå {origem} n√£o encontrado no cart√≥rio de origem {lanc.cartorio_origem.nome if lanc.cartorio_origem else 'None'}")
                self.stdout.write()
        else:
            self.stdout.write("‚ùå Documento T1004 n√£o encontrado")
        
        # Buscar documento T2822
        self.stdout.write("\nüîç BUSCANDO DOCUMENTO T2822")
        self.stdout.write("-" * 30)
        
        doc_t2822 = Documento.objects.filter(numero='T2822').first()
        if doc_t2822:
            self.stdout.write(f"‚úÖ Documento T2822 encontrado:")
            self.stdout.write(f"   ID: {doc_t2822.id}")
            self.stdout.write(f"   Im√≥vel: {doc_t2822.imovel.matricula}")
            self.stdout.write(f"   Cart√≥rio: {doc_t2822.cartorio.nome}")
        else:
            self.stdout.write("‚ùå Documento T2822 n√£o encontrado")
        
        # Testar constru√ß√£o da √°rvore se T1004 existe
        if doc_t1004:
            self.stdout.write("\nüå≥ TESTANDO CONSTRU√á√ÉO DA √ÅRVORE")
            self.stdout.write("-" * 30)
            
            try:
                arvore = HierarquiaArvoreServiceMelhorado.construir_arvore_cadeia_dominial_melhorada(
                    doc_t1004.imovel, criar_documentos_automaticos=criar_automatico
                )
                
                self.stdout.write(f"‚úÖ √Årvore constru√≠da com sucesso!")
                self.stdout.write(f"   Documentos: {len(arvore['documentos'])}")
                self.stdout.write(f"   Conex√µes: {len(arvore['conexoes'])}")
                
                # Verificar se T1004 e T2822 est√£o conectados
                conexao_encontrada = False
                for conexao in arvore['conexoes']:
                    if (conexao['from'] == 'T1004' and conexao['to'] == 'T2822') or \
                       (conexao['from'] == 'T2822' and conexao['to'] == 'T1004'):
                        conexao_encontrada = True
                        self.stdout.write(f"‚úÖ CONEX√ÉO ENCONTRADA: {conexao['from']} -> {conexao['to']}")
                        break
                
                if not conexao_encontrada:
                    self.stdout.write("‚ùå CONEX√ÉO T1004 <-> T2822 N√ÉO ENCONTRADA")
                
                # Mostrar todas as conex√µes
                self.stdout.write("\nüìä TODAS AS CONEX√ïES:")
                for conexao in arvore['conexoes']:
                    self.stdout.write(f"   {conexao['from']} -> {conexao['to']} ({conexao['tipo']})")
                
            except Exception as e:
                self.stdout.write(f"‚ùå Erro ao construir √°rvore: {e}")
                import traceback
                traceback.print_exc()
        
        # Buscar todos os lan√ßamentos que citam T2822
        self.stdout.write("\nüîç LAN√áAMENTOS QUE CITAM T2822")
        self.stdout.write("-" * 30)
        
        lancamentos_citando_t2822 = Lancamento.objects.filter(origem__icontains='T2822')
        self.stdout.write(f"Encontrados {lancamentos_citando_t2822.count()} lan√ßamentos que citam T2822:")
        
        for lanc in lancamentos_citando_t2822:
            self.stdout.write(f"   - Documento: {lanc.documento.numero} (ID: {lanc.documento.id})")
            self.stdout.write(f"     Lan√ßamento: {lanc.tipo.tipo} - {lanc.numero_lancamento}")
            self.stdout.write(f"     Origem: {lanc.origem}")
            self.stdout.write(f"     Cart√≥rio Origem: {lanc.cartorio_origem.nome if lanc.cartorio_origem else 'None'}")
            
            # Testar extra√ß√£o
            origens = HierarquiaArvoreServiceMelhorado.extrair_origens_robusto(lanc.origem)
            self.stdout.write(f"     Origens extra√≠das: {origens}")
            self.stdout.write()
        
        self.stdout.write("‚úÖ Teste conclu√≠do!")
