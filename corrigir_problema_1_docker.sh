#!/bin/bash

# Script para corrigir o Problema 1: ALLOWED_HOSTS no ambiente Docker
# Este script configura o Nginx Docker para filtrar requisi√ß√µes maliciosas

echo "üîß CORRIGINDO PROBLEMA 1: ALLOWED_HOSTS (DOCKER)"
echo "================================================"

# Verificar se estamos no diret√≥rio correto
if [ ! -f "docker-compose.yml" ]; then
    echo "‚ùå Erro: Execute este script no diret√≥rio raiz do projeto"
    exit 1
fi

echo ""
echo "üìã AN√ÅLISE DO PROBLEMA:"
echo "----------------------"
echo "‚Ä¢ Erro: Invalid HTTP_HOST header: '20xgeorgia.me'"
echo "‚Ä¢ Causa: Bots maliciosos tentando acessar o servidor"
echo "‚Ä¢ Ambiente: Docker (nginx container)"
echo "‚Ä¢ Solu√ß√£o: Configurar Nginx Docker para filtrar requisi√ß√µes maliciosas"
echo ""

echo "üîç VERIFICANDO CONFIGURA√á√ÉO ATUAL:"
echo "---------------------------------"

# Verificar se a configura√ß√£o j√° foi aplicada
if grep -q "default_server" nginx/conf.d/default.conf; then
    echo "‚úÖ Configura√ß√£o de seguran√ßa j√° aplicada no nginx/conf.d/default.conf"
else
    echo "‚ö†Ô∏è Configura√ß√£o de seguran√ßa n√£o encontrada"
fi

echo ""
echo "üìã CONFIGURA√á√ÉO APLICADA:"
echo "------------------------"
echo "‚úÖ Bloqueio de hosts maliciosos (20xgeorgia.me, etc.)"
echo "‚úÖ Bloqueio de acesso a arquivos sens√≠veis (.env, .git, etc.)"
echo "‚úÖ Bloqueio de User-Agents maliciosos (bots, crawlers, etc.)"
echo "‚úÖ Retorno 444 (sem resposta) para ataques"
echo ""

echo "üöÄ APLICANDO CORRE√á√ÉO NO DOCKER:"
echo "-------------------------------"

# Verificar se o Docker est√° rodando
if ! docker info > /dev/null 2>&1; then
    echo "‚ùå Erro: Docker n√£o est√° rodando"
    exit 1
fi

# Verificar se os containers est√£o rodando
if ! docker-compose ps | grep -q "cadeia_dominial_nginx"; then
    echo "‚ö†Ô∏è Container nginx n√£o est√° rodando"
    echo "   Iniciando containers..."
    docker-compose up -d
else
    echo "‚úÖ Container nginx est√° rodando"
fi

echo ""
echo "üîÑ RECONSTRUINDO CONTAINER NGINX:"
echo "--------------------------------"

# Reconstruir o container nginx com a nova configura√ß√£o
echo "Reconstruindo container nginx..."
docker-compose build nginx

echo ""
echo "üîÑ REINICIANDO CONTAINER NGINX:"
echo "------------------------------"

# Reiniciar o container nginx
echo "Reiniciando container nginx..."
docker-compose restart nginx

echo ""
echo "üîç VERIFICANDO STATUS:"
echo "--------------------"

# Verificar se o container est√° rodando
if docker-compose ps | grep -q "cadeia_dominial_nginx.*Up"; then
    echo "‚úÖ Container nginx reiniciado com sucesso"
else
    echo "‚ùå Erro ao reiniciar container nginx"
    echo "Verificando logs..."
    docker-compose logs nginx
    exit 1
fi

echo ""
echo "üìä TESTANDO CONFIGURA√á√ÉO:"
echo "------------------------"

# Testar se a configura√ß√£o est√° funcionando
echo "Testando acesso leg√≠timo..."
if curl -s -H "Host: 46.62.152.252" http://localhost/health > /dev/null 2>&1; then
    echo "‚úÖ Acesso leg√≠timo funcionando"
else
    echo "‚ö†Ô∏è Acesso leg√≠timo com problemas"
fi

echo ""
echo "üöÄ PR√ìXIMOS PASSOS:"
echo "------------------"
echo "1. Monitorar logs para verificar se os ataques foram bloqueados:"
echo "   docker-compose logs -f nginx"
echo ""
echo "2. Verificar logs do Django para confirmar redu√ß√£o de erros ALLOWED_HOSTS:"
echo "   docker-compose logs -f web"
echo ""
echo "3. Testar acesso malicioso (deve retornar 444):"
echo "   curl -H 'Host: 20xgeorgia.me' http://localhost/"
echo ""

echo "‚úÖ Problema 1 corrigido no ambiente Docker!"
echo ""
echo "üìù NOTA: Esta corre√ß√£o filtra requisi√ß√µes maliciosas no n√≠vel do Nginx Docker,"
echo "   evitando que cheguem ao Django e causem erros de ALLOWED_HOSTS." 