"""
Patch para resolver o problema de conex√£o T1004 -> T2822
Aplica melhorias no HierarquiaArvoreService original
"""

def aplicar_patch_hierarquia_arvore_service():
    """
    Aplica patch no HierarquiaArvoreService para resolver problemas de conex√£o
    """
    
    # Importar o servi√ßo original
    from dominial.services.hierarquia_arvore_service import HierarquiaArvoreService
    import re
    import logging
    
    logger = logging.getLogger(__name__)
    
    def extrair_origens_robusto(origem_texto):
        """
        Vers√£o melhorada da extra√ß√£o de origens
        """
        if not origem_texto:
            return []
        
        origens = []
        
        # Padr√£o 1: M/T seguido de n√∫meros (padr√£o atual)
        padrao1 = re.findall(r'[MT]\d+', origem_texto)
        origens.extend(padrao1)
        
        # Padr√£o 2: M/T com separadores (espa√ßos, h√≠fens, pontos)
        padrao2 = re.findall(r'[MT]\s*[-.]?\s*\d+', origem_texto)
        for match in padrao2:
            # Limpar e normalizar
            limpo = re.sub(r'\s*[-.]?\s*', '', match)
            if limpo not in origens:
                origens.append(limpo)
        
        # Padr√£o 3: N√∫meros simples (assumir como matr√≠cula se >= 3 d√≠gitos)
        padrao3 = re.findall(r'\b\d{3,}\b', origem_texto)
        for num in padrao3:
            # Verificar se n√£o est√° j√° capturado em outros padr√µes
            if not any(f'M{num}' in origem_texto or f'T{num}' in origem_texto for _ in [1]):
                # Assumir como matr√≠cula por padr√£o
                if f'M{num}' not in origens:
                    origens.append(f'M{num}')
        
        # Padr√£o 4: Busca por texto livre
        # Procurar por "transcri√ß√£o" + n√∫mero
        padrao4 = re.findall(r'transcri[√ßc][√£a]o\s*(\d+)', origem_texto, re.IGNORECASE)
        for num in padrao4:
            if f'T{num}' not in origens:
                origens.append(f'T{num}')
        
        # Procurar por "matr√≠cula" + n√∫mero
        padrao5 = re.findall(r'matr[√≠i]cula\s*(\d+)', origem_texto, re.IGNORECASE)
        for num in padrao5:
            if f'M{num}' not in origens:
                origens.append(f'M{num}')
        
        # Remover duplicatas e retornar
        return list(set(origens))
    
    def buscar_documento_origem_robusto(origem_numero, cartorio_origem=None, lancamento=None):
        """
        Busca documento de origem APENAS no cart√≥rio de origem especificado
        CORRE√á√ÉO: N√£o busca em outros cart√≥rios para evitar conex√µes incorretas
        """
        from dominial.models import Documento
        
        logger.info(f"üîç Buscando documento origem: {origem_numero}")
        
        # REGRA: Buscar APENAS no cart√≥rio de origem especificado
        if cartorio_origem:
            # Estrat√©gia 1: Buscar exatamente como especificado
            doc = Documento.objects.filter(
                numero=origem_numero,
                cartorio=cartorio_origem
            ).first()
            
            if doc:
                logger.info(f"‚úÖ Documento {origem_numero} encontrado no cart√≥rio de origem {cartorio_origem.nome}")
                return doc
            
            # Estrat√©gia 2: Buscar por varia√ß√µes do n√∫mero no MESMO cart√≥rio
            numero_limpo = re.sub(r'^[MT]', '', origem_numero)
            if numero_limpo.isdigit():
                # Buscar com prefixo M no mesmo cart√≥rio
                doc_m = Documento.objects.filter(
                    numero=f'M{numero_limpo}',
                    cartorio=cartorio_origem
                ).first()
                if doc_m:
                    logger.info(f"‚úÖ Documento encontrado como M{numero_limpo} no cart√≥rio {cartorio_origem.nome}")
                    return doc_m
                
                # Buscar com prefixo T no mesmo cart√≥rio
                doc_t = Documento.objects.filter(
                    numero=f'T{numero_limpo}',
                    cartorio=cartorio_origem
                ).first()
                if doc_t:
                    logger.info(f"‚úÖ Documento encontrado como T{numero_limpo} no cart√≥rio {cartorio_origem.nome}")
                    return doc_t
            
            logger.warning(f"‚ùå Documento {origem_numero} n√£o encontrado no cart√≥rio de origem {cartorio_origem.nome}")
            return None
        
        # Se n√£o tem cart√≥rio de origem especificado, n√£o buscar em lugar nenhum
        logger.warning(f"‚ùå Cart√≥rio de origem n√£o especificado para {origem_numero} - n√£o buscando")
        return None
    
    # Substituir o m√©todo _buscar_documentos_pais
    def _buscar_documentos_pais_melhorado(documento, imovel, criar_documentos_automaticos):
        """
        Vers√£o melhorada para buscar documentos pais (origens)
        """
        from dominial.models import Documento
        from collections import deque
        
        documentos_pais = []
        documentos_processados = set()
        
        logger.info(f"üîç Buscando documentos pais para {documento.numero}")
        
        # Buscar lan√ßamentos com origens
        lancamentos = documento.lancamentos.filter(
            origem__isnull=False
        ).exclude(origem='')
        
        logger.info(f"üìã Encontrados {lancamentos.count()} lan√ßamentos com origens")
        
        for lancamento in lancamentos:
            logger.info(f"üìù Processando lan√ßamento {lancamento.id}: {lancamento.origem}")
            
            # Extrair origens com m√©todo robusto
            origens = extrair_origens_robusto(lancamento.origem)
            
            logger.info(f"üéØ Origens extra√≠das: {origens}")
            
            for origem_numero in origens:
                if origem_numero in documentos_processados:
                    logger.info(f"‚è≠Ô∏è Origem {origem_numero} j√° processada, pulando")
                    continue
                
                documentos_processados.add(origem_numero)
                
                # Buscar documento com m√©todo robusto
                doc_pai = buscar_documento_origem_robusto(
                    origem_numero, 
                    lancamento.cartorio_origem, 
                    lancamento
                )
                
                if doc_pai:
                    logger.info(f"‚úÖ Documento pai encontrado: {doc_pai.numero} (ID: {doc_pai.id})")
                    documentos_pais.append(doc_pai)
                else:
                    logger.warning(f"‚ùå Documento {origem_numero} n√£o encontrado")
        
        logger.info(f"üìä Total de documentos pais encontrados: {len(documentos_pais)}")
        return documentos_pais
    
    # Aplicar o patch
    HierarquiaArvoreService._buscar_documentos_pais = _buscar_documentos_pais_melhorado
    
    logger.info("‚úÖ Patch aplicado com sucesso no HierarquiaArvoreService")
    
    return True


if __name__ == "__main__":
    aplicar_patch_hierarquia_arvore_service()
